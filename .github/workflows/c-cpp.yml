# Copyright (c) 2021 Luca Cappa
# Released under the term specified in file LICENSE.txt
# SPDX short identifier: MIT

# A GitHub workflow using CMake, Ninja and vcpkg.
# It is called "pure" because it is an example which minimizes the usage of custom GitHub actions, but leverages directly the tools that could be easily run on your development machines (i.e. CMake, vcpkg, Ninja).
name: hosted-pure-workflow
on: [push]

jobs:
  job:
    name: ${{ matrix.os }}-hosted-pure
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: windows-latest
            triplet: x64-windows
          - os: ubuntu-latest
            triplet: x64-linux
          - os: macos-latest
            triplet: x64-osx
    env:
      # Indicates the CMake build directory where project files and binaries are being produced.
      CMAKE_BUILD_DIR: ${{ github.workspace }}/builddir/

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      # Install Gnuplot. The way we do it depends on the system
      - name: Install Gnuplot for Linux
        if: runner.os == 'Linux'
        run: |
          sudo apt-get -o Acquire::Retries=3 -y update
          sudo apt-get -o Acquire::Retries=3 -y install gnuplot
      - name: Install Gnuplot for Mac OS X
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install gnuplot
      - name: Install Gnuplot and MinGW for Windows
        if: runner.os == 'Windows'
        run: |
          choco install -y --no-progress gnuplot --install-arguments="/LOADINF=gnuplot_install.inf"
          choco install -y --no-progress mingw
          g++ --version
          
      # Setup the build machine with the most recent versions of CMake and Ninja. Both are cached if not already: on subsequent runs both will be quickly restored from GitHub cache service.
      - uses: lukka/get-cmake@latest
      
      - name: Generate project files
        run: |
          cmake -G Ninja -B "${{ env.CMAKE_BUILD_DIR }}"
      # Build the whole project
      - name: Build
        run: |
          cmake --build "${{ env.CMAKE_BUILD_DIR }}"
      # Run the tests
      - name: Run tests
        working-directory: "${{ env.CMAKE_BUILD_DIR }}"
        run: |
          ctest -C Debug --output-on-failure
      - name: Show content of workspace at its completion
        run: find $RUNNER_WORKSPACE
        shell: bash
